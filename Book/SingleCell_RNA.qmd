---
title: "Single Cell Intro"
author: "Adrien Osakwe"
format: html
editor: visual
---

## Single Cell Analyses

This section contains very basic examples of R code for Single cell analyses using 10X data.

Examples in this section were made using the OSCA e-book and data from the 10X Genomics Dataset Page. Pancreas datasets came from the Grun et al. and Muraro et al. papers.

## 1. Loading 10X Data into R

We can load 10X Data into R to generate a 'SingleCellExperiment' object. We can either

-   load the cellranger outputs directly

    ```{r}
    set.seed(1234)
    library(DropletUtils)

    #Load raw cellranger counts
    #file.name <- "../Data/raw_gene_bc_matrices/GRCh38/"

    #You can also load the filtered counts (removes empty droplets)
    file.name <- "../Data/filtered_gene_bc_matrices/GRCh38/"

    sce <- read10xCounts(file.name)
    #read10xCounts takes a directory path and looks for the three key 10X outputs
    #barcodes.tsv, genes.tsv, matrix.mtx
    sce
    ```

-   load a pre-existing .rds file that contains a SingleCellExperiment object.

    ```{r}
    sce <- readRDS("../Data/sce.rds")
    ```

```{r}
library(scater)
rownames(sce) <- uniquifyFeatureNames(
    rowData(sce)$ID, rowData(sce)$Symbol)


#Load Gene chromosome locations
location <- readRDS("../Data/gene_locations.rds")
#Generated with this code
# library(EnsDb.Hsapiens.v75)
# location <- mapIds(EnsDb.Hsapiens.v75, keys=rowData(sce)$ID,
#     column="SEQNAME", keytype="GENEID")

```

```{r}
## The SingleCellExperiment Object
sce

#Look at feature Data
rowData(sce)

#Look at metadata
colData(sce)

#Check Dimensions
nrow(sce)
ncol(sce)
dim(sce)
```

## 2. Basic Quality Control

Here, we loaded the raw, unfiltered 10X counts which require us to do some cleaning (particularly for empty droplets!).

In the quality control of single cell data, we usually consider the following metrics:

-   \% of mitochondrial genes

-   \# of non-zero features per cell

-   total read count per cell

We also want to filter out the following:

-   empty droplets

-   doublet cells (scDblFinder)

In practice, you may want to also consider some other features.

### Generating QC Metrics

```{r}
set.seed(1234)
#Use below IF using raw cellranger output
# e.out <- emptyDrops(sce)
# sce <- sce[,which(e.out$FDR <= 0.001)]
unfiltered <- sce

stats <- perCellQCMetrics(sce, subsets=list(Mito=which(location=="MT")))

high.mito <- isOutlier(stats$subsets_Mito_percent, type="higher")
sce <- sce[,!high.mito]

summary(high.mito)
```

### Visualizing

```{r}
colData(unfiltered) <- cbind(colData(unfiltered), stats)
unfiltered$discard <- high.mito

gridExtra::grid.arrange(
    plotColData(unfiltered, y="sum", colour_by="discard") +
        scale_y_log10() + ggtitle("Total count"),
    plotColData(unfiltered, y="detected", colour_by="discard") +
        scale_y_log10() + ggtitle("Detected features"),
    plotColData(unfiltered, y="subsets_Mito_percent",
        colour_by="discard") + ggtitle("Mito percent"),
    ncol=2
)
```

### Additional Filtering

Based on the results, we can use the other QC metrics for additional filteirng

```{r}
stats

#Practice Add metadata column that says which cells have at least 1500 detected genes


#Practice Add metadata column that says which cells have at least 10 detected mitochondrial genes

```

### Normalization

```{r}
library(scran)
set.seed(1234)
clusters <- quickCluster(sce) #Simple way to generate clusters
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)


dec <- modelGeneVar(sce)
top_hvgs <- getTopHVGs(dec,n = 2000)
```

## 3. Dimension Reduction & Clustering

Dimension reduction is extremely useful for visualizing single cell data. Although PCA is still viable, it does not perform as well as non-linear methods such as t-SNE and UMAP. Do note that although UMAP is currently the tool of choice, there is currently a big debate on the benefits of using such methods in analysis (I suggest looking up Lior Pachter's work to learn more about this).

### t-SNE

```{r}
set.seed(1234)
sce <- denoisePCA(sce, subset.row=top_hvgs, technical=dec)


sce <- runTSNE(sce, dimred="PCA")
plotTSNE(sce, colour_by="Sample")
```

### UMAP

```{r}
set.seed(1234)

sce <- runUMAP(sce, dimred="PCA")
plotUMAP(sce, colour_by="Sample")
```

### K-means Clustering

```{r}
set.seed(1234)
g <- buildSNNGraph(sce, k=10, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sce) <- factor(clust)

plotTSNE(sce, colour_by="label")
plotUMAP(sce, colour_by="label")
```

## 4. Cell Type Annotation

With our generated UMAP coordinates and clusters, we can undertake the task of cell annotation. It is possible to do this manually and automatically. In practice, I suggest to combine both approaches to ensure your annotations are as accurate as possible. In this section we will use pancreas samples.

### Automated Annotation

A key advantage of automated annotation is that it usually (depending on the method) provides an annotation for **individual cells**. This is quite useful for scoring individual cells and identifying sub cell types.

```{r}
#Single R
library(SingleR)
sceM <- readRDS("../Data/ref_pancreas.rds")
sceG <- readRDS("../Data/pancreas_sce.rds")
sceM <- logNormCounts(sceM)
sceG <- logNormCounts(sceG) 

pred.grun <- SingleR(test=sceG, ref=sceM, labels=sceM$label, de.method="wilcox")
table(pred.grun$labels)

sceG$pred <- pred.grun$labels


decG <- modelGeneVar(sceG)
top_hvgsG <- getTopHVGs(decG,n = 2000)
sceG <- denoisePCA(sceG, subset.row=top_hvgsG, technical=decG)
sceG <- runUMAP(sceG, dimred="PCA")
plotUMAP(sceG, colour_by="pred")
```

### Manual Annotation

An issue with labeling individual cells is that their annotation is more susceptible to noise. To this end, manual annotations which are usually done at the level of clusters may be more reliable.

```{r}
#Generate Clusters
set.seed(1234)
g <- buildSNNGraph(sceG, k=7, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sceG) <- factor(clust)
plotUMAP(sceG, colour_by="label")
rownames(sceG) <- rowData(sceG)$symbol
plotExpression(sceG, features=c("INS-IGF2", "GCG",
    "SST", "PRSS1"), x="label", colour_by="label")


plotUMAP(sceG, colour_by="INS")
```

### Considerations for DGE during cluster annotation

Previously, many researchers would simply run a DGE analysis on different clusters to determine cell types. However, this has been proven to be a case of 'double-dipping' data which is a serious concern for reproducibility. Although this approach can work fine for very distinct cell types, it is not recommended for the analysis of more similar cell types of cell subtypes.

```{r}
markers <- findMarkers(sceG, pval.type="some", direction="up")
marker.set <- markers[["4"]]
as.data.frame(marker.set[1:30,1:3])
```
